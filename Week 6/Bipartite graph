#include<iostream>
#include<vector>
#include<queue>
#include<algorithm>
using namespace std;
bool isBipartite(vector<int> graph[],int n) {
        vector<int> colors(n,0);
        for(int i=0;i<n;i++){ // it is 0 based so put nodes from 0.
            if(!colors[i]){
                queue<pair<int,signed int> > q;
                q.push({i,-1});
                colors[i]=1;

                while(!q.empty()){
                    int node = q.front().first;
                    int parent = q.front().second;
                    q.pop();
                    for(int j=0;j<graph[node].size();j++){
                        if(!colors[graph[node][j]]){
                            q.push({graph[node][j],node});
                                if(colors[node]==1)
                                    colors[graph[node][j]]=2;
                                else
                                    colors[graph[node][j]]=1;
                        }
                        else if(colors[graph[node][j]]==colors[node])
                                             return false;
                }
            }
        }
    }

    return true;
}

int main(){
int n,m,test;
cin>>test;
for(int t=0;t<test;t++){
cout<<"Enter no.of nodes and edges";
cin>>n>>m;
vector<int> a[n];

for(int i=0;i<m;i++){
    cout<<"Enter u and v";
    int u,v;
    cin>>u>>v;
    a[u].push_back(v);
    a[v].push_back(u);
}
if(isBipartite(a,n))
    cout<<"Yes Bipartite"<<endl;
else
 cout<<"Not Bipartite"<<endl;
}
return 0;
}
